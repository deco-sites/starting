@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  .html {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    font-family: Albert Sanssans-serif;
    scroll-behavior: smooth;
  }

  details>summary {
    list-style: none;
  }

  details summary::-webkit-details-marker {
    display: none;
  }

  details[open] summary svg {
    transform: rotate(90deg);
  }

  details[open] summary.notShow svg {
    transform: rotate(0);
  }

  details[open] {
    >.faq .chevron-down {
      transform: rotate(180deg);
    }
  }

  .hidden-scroll::-webkit-scrollbar {
    display: none;
  }

  .hidden-scroll {
    -ms-overflow-style: none;
    /* IE and Edge */
    scrollbar-width: none;
    /* Firefox */
  }

  input[type=range] {
    -webkit-appearance: none;
    appearance: none;
    background: transparent;
    cursor: pointer;
    width: 100%;
  }

  input[type=range]:focus {
    outline: none;
  }

  input[type=range]::-webkit-slider-runnable-track {
    background-color: #06E474;
    border-radius: 0.5rem;
    height: 0.7rem;
  }

  input[type=range]::-webkit-slider-thumb {
    -webkit-appearance: none;
    /* Override default look */
    appearance: none;
    margin-top: -3px;
    /* Centers thumb on the track */
    background: radial-gradient(circle, rgba(0, 0, 0, 1) 0%, rgba(0, 0, 0, 1) 40%, rgba(255, 255, 255, 1) 40%, rgba(255, 255, 255, 1) 100%);
    border-radius: 1rem;
    border: 1px solid black;
    height: 1.2rem;
    width: 1.2rem;
  }

  input[type=range]:focus::-webkit-slider-thumb {
    border: 2px solid black;
  }

  input::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .rotate-90 {
    transform: rotate(90deg);
  }

  .grid-page-desktop {
    grid-template-columns: 284px auto 280px;
  }

  .grid-page-tablet {
    grid-template-columns: 284px auto;
  }

  .grid-page-mobile {
    grid-template-columns: 1fr;
  }

  .nested {
    counter-reset: item;
  }

  .nested li a:before {
    content: counters(item, ".")".";
    counter-increment: item;
  }

}

@layer components {}

@layer utilities {}